// Time:  O(nlogn)
// Space: O(n)

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */

//先由大到小排序，當後續的開會時間>前面的結束時間=false，反之true
class Solution {
public:
    bool canAttendMeetings(vector<Interval>& intervals) {

        sort(intervals.begin(), intervals.end(),
             [](const Interval& x, const Interval& y) {  //匿名函式[]
		return x.start < y.start;
	    });
        for (int i = 1; i < intervals.size(); ++i) {
            if (intervals[i].start < intervals[i - 1].end) {  //當後續的開會時間>前面的結束時間
                return false;
            }
        }
        return true;
    }
};
